/*
Copyright Â© 2023 Antoine Leroyer

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"fmt"
	"github.com/aleroyer/shipping-labels/internal"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"os"
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "shipping-labels [src_dir] [dest_dir]",
	Short: "Prepare shipping labels to be printed",
	Long: `Take PDF generated by providers such as Colissimo, Chronopost and Mondial Relay.
Strip content to keep only the bare minimum so you can print 4 labels per page on a A4 sticky paper.`,
	Args: cobra.ExactArgs(2),
	ValidArgsFunction: func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
		var comps []string
		if len(args) == 0 {
			comps = cobra.AppendActiveHelp(comps, "You must specify a source directory to read PDF from")
		} else if len(args) == 1 {
			comps = cobra.AppendActiveHelp(comps, "You must specify a destination directory to write PDF to")
		} else {
			comps = cobra.AppendActiveHelp(comps, "This command does not take any more arguments")
		}
		return comps, cobra.ShellCompDirectiveNoFileComp
	},
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 2 {
			preparator, err := internal.NewPreparator(args[0], args[1])
			if err != nil {
				log.Fatal().Msgf("Error when trying to initialize the program: %s", err)
			}
			preparator.Prepare()
			log.Info().Msg("Job done!")
		}
	},
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {}
